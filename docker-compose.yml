services:
  # MySQL Database
  database:
    container_name: itbms-mysql-db
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
    networks:
      - itbms_network
    volumes:
      - itbms_mysql_data:/var/lib/mysql
      - ./itbms-database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./itbms-database/insert.sql:/app/insert.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
  
  # Minio File Stroage Service
  minio:
    container_name: itbms-minio
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      # Production security settings
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL:-http://localhost:9001}
    networks:
      - itbms_network
    volumes:
      - itbms_minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    # Only expose ports if you need external access
    # For production, consider using a reverse proxy instead
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"

  # Ollama Local LLM Model
  ollama:
    container_name: itbms-ollama
    image: ollama/ollama:0.12.1
    volumes:
      - itbms_ollama_data:/root/.ollama
    networks:
      - itbms_network
    # Use 'deploy' for GPU support if available
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]
    restart: unless-stopped

  # Java Spring boot Backend API
  backend:
    container_name: itbms-spring-boot-api
    build:
      context: ./itbms-backend
      dockerfile: dockerfile
    environment:
      FRONTEND_URL: ${FRONTEND_URL}
      # DB
      DB_URL: ${DB_URL}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      # Mail
      MAIL_USER: ${MAIL_USER}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      # Ollama
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL}
      # Minio
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      # Expose actuator endpoints for Prometheus
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: true
      # MongoDB
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_DB: ${MONGO_DB}
      # Redis
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    networks:
      - itbms_network
    depends_on:
      database:
        condition: service_healthy
      minio:
        condition: service_healthy
      ollama:
        condition: service_started

  # Nginx (with reverse proxy) + Vue frontend
  frontend:
    container_name: itbms-nginx-fe
    build:
      context: ./itbms-frontend
      dockerfile: dockerfile
    ports:
      - "80:80"
    networks:
      - itbms_network
    depends_on:
      - backend

  # Prometheus for metrics collection
  prometheus:
    container_name: itbms-prometheus
    image: prom/prometheus:v3.6.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - itbms_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - itbms_network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    container_name: itbms-grafana
    image: grafana/grafana:12.2.0
    ports:
      - "3000:3000"
    volumes:
      - itbms_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    networks:
      - itbms_network
    depends_on:
      - prometheus
    restart: unless-stopped
  
  # MongoDB
  mongodb:
    image: mongo:7.0.24
    container_name: itbms-mongo
    volumes:
      - itbms_mongo_data:/data/db
    networks:
      - itbms_network
  
  # Redis
  redis:
    image: redis:7
    container_name: itbms-redis
    networks:
      - itbms_network

networks:
  itbms_network:

volumes:
  itbms_mysql_data:
  itbms_minio_data:
  itbms_ollama_data: 
  itbms_prometheus_data:
  itbms_grafana_data:
  itbms_mongo_data: