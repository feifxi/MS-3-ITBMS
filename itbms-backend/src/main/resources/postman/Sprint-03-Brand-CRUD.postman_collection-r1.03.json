{
	"info": {
		"_postman_id": "0f83e70f-c2a8-4baf-bfbb-bacf7b46e30a",
		"name": "Sprint-03-Brand-CRUD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6637675"
	},
	"item": [
		{
			"name": "PBI-PRE-6-GET-BRAND-DETAIL",
			"item": [
				{
					"name": "GET-BRAND-DETAIL-FOUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"item = pm.response.json();",
									"",
									"pm.test(\"Request: \"+ pm.request.url.getPath.toString());",
									"pm.test(\"Response: \"+ JSON.stringify(item));",
									"",
									"pm.test(\"The Expected Status code is 200 #\"+ round, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"The expected brand detail attribute's name\", function () {",
									"    pm.expect(Object.keys(item).length).to.be.at.least(6);",
									"    pm.expect(item).to.have.property('id');",
									"    pm.expect(item).to.have.property('name');",
									"    pm.expect(item).to.have.property('websiteUrl');",
									"    pm.expect(item).to.have.property('countryOfOrigin');",
									"    pm.expect(item).to.have.property('isActive');",
									"    pm.expect(item).to.have.property('noOfSaleItems');",
									"});",
									"base_brand = INIT_BRANDS[targetBrandId-1];",
									"pm.test('The expected brand detail attribute values', () => {",
									"    pm.expect(item.id).to.be.eq(targetBrandId);",
									"    pm.expect(item.name).to.be.eq(base_brand.name);",
									"    pm.expect(item.noOfSaleItems).to.be.gte(base_brand.noOfSaleItems==undefined ? 0 : base_brand.noOfSaleItems); ",
									"});",
									"",
									"if(round >= 3) {",
									"    pm.collectionVariables.set(\"rounds\", null);",
									"    pm.execution.setNextRequest();",
									"} else {",
									"    pm.execution.setNextRequest(\"GET-BRAND-DETAIL-FOUND\");",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.has(\"rounds\")) {",
									"    pm.collectionVariables.set(\"rounds\", 999);",
									"}",
									"round = parseInt(pm.collectionVariables.get(\"rounds\"));",
									"round = (isNaN(round) || round >= 3) ? 0 : round + 1;",
									"",
									"pm.collectionVariables.set(\"rounds\", round);",
									"",
									"",
									"targetBrandId = Math.round(Math.random()*100) % 20 + 1;",
									"pm.collectionVariables.set(\"target_id\", targetBrandId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/brands/{{target_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"brands",
								"{{target_id}}"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "GET-BRAND-DETAIL-NOT-FOUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"item = pm.response.json();",
									"",
									"pm.test(\"Request: \"+ pm.request.url.getPath.toString());",
									"pm.test(\"Response: \"+ JSON.stringify(item));",
									"",
									"pm.test(\"The Expected Status code is 404 #\"+ round, function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"if(round >= 1) {",
									"    pm.collectionVariables.set(\"rounds\", null);",
									"    pm.execution.setNextRequest();",
									"} else {",
									"    pm.execution.setNextRequest(\"GET-BRAND-DETAIL-NOT-FOUND\");",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.has(\"rounds\")) {",
									"    pm.collectionVariables.set(\"rounds\", 999);",
									"}",
									"round = parseInt(pm.collectionVariables.get(\"rounds\"));",
									"round = (isNaN(round) || round >= 1) ? 0 : round + 1;",
									"",
									"pm.collectionVariables.set(\"rounds\", round);",
									"",
									"",
									"targetBrandId = (Math.round(Math.random())+1) * 100 ;",
									"pm.collectionVariables.set(\"target_id\", targetBrandId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/brands/{{target_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"brands",
								"{{target_id}}"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			],
			"description": "| EXPECTED RESPONSE BODY: | **EXAMPLE** |\n| --- | --- |\n| {  <br>\"id\": Int,  <br>\"name\": \"String\",  <br>\"websiteUrl\": \"String\",  <br>\"countryOfOrigin\": \"String\",  <br>\"isActive\": **Boolean**,  <br>**\"noOfSaleItems\"**: 0  <br>} | {  <br>\"id\": 2,  <br>\"name\": \"Apple\",  <br>\"websiteUrl\": \"[https://www.apple.com\"](https://www.apple.com\"),  <br>\"countryOfOrigin\": \"United States\",  <br>\"isActive\": true,  <br>\"noOfSaleItems\": 10  <br>} |\n\nBrand ID: **1, 2, 3, 4, 10, 12** - noOfSaleItems must be >= 10",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "PBI-6-ADD-BRAND",
			"item": [
				{
					"name": "ADD-BRAND-NORMAL-RANDOM-CASE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const item = pm.response.json();",
									"",
									"pm.test(\"The Expected Response is an Object\", function () {",
									"    pm.expect(item).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Request: \"+ pm.request.body.raw.toString());",
									"pm.test(\"Response: \"+ JSON.stringify(item));",
									"pm.test(\"The Expected Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"The expected brand detail attribute's name\", function () {",
									"    pm.expect(Object.keys(item).length).to.be.at.least(6);",
									"    pm.expect(item).to.have.property('id');",
									"    pm.expect(item).to.have.property('name');",
									"    pm.expect(item).to.have.property('websiteUrl');",
									"    pm.expect(item).to.have.property('countryOfOrigin');",
									"    pm.expect(item).to.have.property('isActive');",
									"    pm.expect(item).to.have.property('noOfSaleItems');",
									"});",
									"",
									"pm.sendRequest(pm.collectionVariables.get(\"base_url\")+'/v1/brands/'+item.id, (error, response) => {",
									"  if (error) {",
									"    console.log(error);",
									"  }",
									"  new_brand = response.json();",
									"//   console.log('---new brand ------')",
									"//   console.log(new_brand);",
									"  pm.test('Get a new brand by id, expected attribute values', () => {",
									"    pm.expect(copyBrand.id).to.be.not.eq(new_brand.id);",
									"    pm.expect(copyBrand.name.trim()).to.be.eq(new_brand.name);",
									"    pm.expect(copyBrand.websiteUrl).to.be.eq(new_brand.websiteUrl);",
									"    if (copyBrand.isActive==null) {",
									"        pm.expect(new_brand.isActive).to.be.oneOf([true,false]);",
									"    } else {",
									"        pm.expect(copyBrand.isActive).to.be.eq(new_brand.isActive);",
									"    }",
									"    pm.expect(copyBrand.countryOfOrigin).to.be.eq(new_brand.countryOfOrigin);",
									"    pm.expect(new_brand.noOfSaleItems).to.be.gte(0); ",
									"  });",
									"});",
									"",
									"",
									"if(round>=BASE_BRANDS.length-1) {",
									"    pm.collectionVariables.set(\"rounds\", null);",
									"    pm.execution.setNextRequest();",
									"} else {",
									"    pm.execution.setNextRequest(\"ADD-BRAND-NORMAL-RANDOM-CASE\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.has(\"rounds\")) {",
									"    pm.collectionVariables.set(\"rounds\", 999);",
									"}",
									"round = parseInt(pm.collectionVariables.get(\"rounds\"));",
									"round = (isNaN(round) || round >= BASE_BRANDS.length-1) ? 0 : round + 1;",
									"",
									"pm.collectionVariables.set(\"rounds\", round);",
									"",
									"copyBrand = BASE_BRANDS[round];",
									"console.log(\"request body: #\"+ round, copyBrand);",
									"pm.request.body.raw = JSON.stringify(copyBrand);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/brands",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"brands"
							],
							"query": [
								{
									"key": "trace",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "ADD-BRAND-FAIL-RANDOM-CASE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const item = pm.response.json();",
									"",
									"pm.test(\"The Expected Status code is 400, 404, 442 or 500 ** (\"",
									"  + round + \") **\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400,500,422,404]);",
									"});",
									"",
									"pm.test(\"Test with case of <<- \"+ copyBrand.message + \" ->>\", function () {",
									"    pm.expect(item).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Request: \"+ pm.request.body.raw.toString());",
									"pm.test(\"Response: \"+ JSON.stringify(item));",
									"",
									"",
									"if(round >= BASE_BRAND_FAIL.length-1) {",
									"    pm.collectionVariables.set(\"rounds\", null);",
									"    pm.execution.setNextRequest();",
									"} else {",
									"    pm.execution.setNextRequest(\"ADD-BRAND-FAIL-RANDOM-CASE\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.has(\"rounds\")) {",
									"    pm.collectionVariables.set(\"rounds\", 999);",
									"}",
									"round = parseInt(pm.collectionVariables.get(\"rounds\"));",
									"round = (isNaN(round) || round >= BASE_BRAND_FAIL.length-1) ? 0 : round + 1;",
									"",
									"pm.collectionVariables.set(\"rounds\", round);",
									"",
									"copyBrand = BASE_BRAND_FAIL[round];",
									"",
									"console.log(\"request body: #\"+ round, copyBrand);",
									"pm.request.body.raw = JSON.stringify(copyBrand);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/brands",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"brands"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			],
			"description": "**ADD-BRAND-NORMAL-RANDOM-CASE**  \n**TEST ROUNDS:** 3  \n**SCENARIO:**\n\n1) Send POST request with TEST DATA, Expected status 201  \n2) Get brand ID from Response  \n3) Send GET request to get brand by ID from 2), Expected status 200  \n4) Check Fields/Values from 3).  \n5) Iterate 1) to 4), 3 Rounds.\n\n| TEST DATA : |\n| --- |\n| {  <br>\"name\" : \"Samsung\"+ generateString(Math.round(2-5),  <br>\"websiteUrl\" : \"[https://www.brand.com\"](https://www.brand.com),  <br>\"countryOfOrigin\" : \"United State of America\",  <br>\"isActive\" : true  <br>} |\n| {  <br>\"id\": null,  <br>\"name\" : \" New Brand\" + generateString(Math.round(2-5)+ \" \",  <br>**\"websiteUrl\" : null**,  <br>\"countryOfOrigin\" : \"United State of America\",  <br>**\"isActive\" : null**  <br>} |\n| {  <br>\"id\": 1,  <br>\"name\" : \" \"+ generateString(30)+ \" \",  <br>\"websiteUrl\" : generateString(40),  <br>\"countryOfOrigin\" : generateString(80),  <br>**\"isActive\" : false**  <br>} |\n\n**ADD-BRAND-FAIL-RANDOM-CASE**  \n**TEST ROUNDS:** 4  \n**SCENARIO:**\n\n1) Send POST request with TEST DATA, Expected status 400,500 (404 for Test Data #2)  \n2) Iterate 1) , 4 Rounds.\n\n| **TEST DATA:** |\n| --- |\n| **\\# isActive is not Boolean  <br>**{  <br>\"name\" : \"Samsung\"+ generateString(Math.round(Math.random()\\*3)+2),  <br>\"websiteUrl\" : \"[https://www.brand.com\"](https://www.brand.com),  <br>\"countryOfOrigin\" : \"United State of America\",  <br>\"isActive\" : \"true/false\",  <br>} |\n| **\\# Field length exeed limit**  <br>{  <br>\"id\": null,  <br>\"name\" : generateString(41) ,  <br>\"websiteUrl\" : \"[https://www.brand.com\"](https://www.brand.com),  <br>\"countryOfOrigin\" : \"United State of America\",  <br>\"isActive\" : null,  <br>} |\n| **\\# Duplicated brand name (unmatched case)**  <br>{  <br>\"id\": null,  <br>\"name\" : \" saMsUng \" ,  <br>\"websiteUrl\" : \"[https://www.brand.com\"](https://www.brand.com),  <br>\"countryOfOrigin\" : null,  <br>\"isActive\" : null,  <br>} |\n| **\\# Empty brand name, field length is exceed limit**  <br>{  <br>\"id\": 1,  <br>**\"name\" : \" \",**  <br>\"websiteUrl\" : generateString(**41)**,  <br>\"countryOfOrigin\" : generateString(**81**),  <br>\"isActive\" : false,  <br>} |",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "PBI-7-EDIT-BRAND",
			"item": [
				{
					"name": "EDIT-BRAND-NORMAL-RANDOM-CASE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"console.log(\"Original brand: #\"+ targetBrandId, ORIGINAL_DATA);",
									"",
									"item = pm.response.json();",
									"",
									"pm.test(\"The Expected Status code is 200 #\"+ round, function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Request: \"+ pm.request.body.raw.toString());",
									"pm.test(\"Response: \"+ JSON.stringify(item));",
									"",
									"update_base_item = copyBrand;",
									"    ",
									"pm.sendRequest(pm.collectionVariables.get(\"base_url\")+'/v1/brands/'",
									"    + targetBrandId, (error, response, request) => {",
									"  if (error) {",
									"    console.log(error);",
									"  } else {",
									"",
									"    new_sale_item = response.json();",
									"",
									"    pm.test('Get a updated brand by id, expected attribute values', () => {",
									"        pm.expect(targetBrandId).to.be.eq(new_sale_item.id);",
									"        pm.expect(update_base_item.name.trim()).to.be.eq(new_sale_item.name);",
									"        pm.expect(update_base_item.websiteUrl).to.be.eq(new_sale_item.websiteUrl);",
									"        pm.expect(update_base_item.countryOfOrigin).to.be.eq(new_sale_item.countryOfOrigin);",
									"        pm.expect(new_sale_item.noOfSaleItems).to.be.gte(0);",
									"        if (update_base_item.isActive==null) {",
									"            pm.expect(new_sale_item.isActive).to.be.oneOf([true,false]);",
									"        } else {",
									"            pm.expect(update_base_item.isActive).to.be.eq(new_sale_item.isActive);",
									"        }",
									"    });",
									"  }",
									"});",
									"",
									"console.log(\"---- end of update procedure, next restore previous data ---\")",
									"the_url = pm.request.url.toString();",
									"const updateRequest = {",
									"    url: the_url,",
									"    method: 'PUT',",
									"    header: {",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: ORIGINAL_DATA",
									"    }",
									"};",
									"",
									"pm.sendRequest(updateRequest, function (err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        pm.test(\"Restore Brand to previous state, Expected Status code is 200\", () => {",
									"            let resJson = res.json();",
									"            pm.expect(res).to.have.status(200);",
									"            pm.expect(resJson.name).to.be.eq(ORIGINAL_DATA.name);",
									"            pm.expect(resJson.noOfSaleItems).to.be.eq(ORIGINAL_DATA.noOfSaleItems);",
									"        });",
									"    }",
									"});",
									"",
									"if(round >= EDIT_BASE_BRANDS.length-1) {",
									"    pm.collectionVariables.set(\"rounds\", null);",
									"    pm.execution.setNextRequest();",
									"} else {",
									"    pm.execution.setNextRequest(\"EDIT-BRAND-NORMAL-RANDOM-CASE\");",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.has(\"rounds\")) {",
									"    pm.collectionVariables.set(\"rounds\", 999);",
									"}",
									"round = parseInt(pm.collectionVariables.get(\"rounds\"));",
									"round = (isNaN(round) || round >= EDIT_BASE_BRANDS.length-1) ? 0 : round + 1;",
									"",
									"pm.collectionVariables.set(\"rounds\", round);",
									"",
									"copyBrand = EDIT_BASE_BRANDS[round];",
									"console.log(\"request body: #\"+ round, copyBrand);",
									"",
									"targetBrandId = copyBrand.target;",
									"",
									"pm.collectionVariables.set(\"target_id\", targetBrandId);",
									"ORIGINAL_DATA = {};",
									"pm.sendRequest(pm.collectionVariables.get(\"base_url\")+'/v1/brands/'+targetBrandId, (error, response) => {",
									"  if (error) {",
									"    console.log(error);",
									"  } else {",
									"    tmp = response.json();",
									"    ORIGINAL_DATA = tmp;",
									"  }",
									"});",
									"",
									"pm.request.body.raw = JSON.stringify(copyBrand);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/brands/{{target_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"brands",
								"{{target_id}}"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "EDIT-BRAND-FAIL-RANDOM-CASE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const item = pm.response.json();",
									"",
									"if(copyBrand.target != 999) {",
									"    pm.test(\"The Expected Status code is 400, 404, 442 or 500 #(\"+ round + \")\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,500,422,404]);",
									"    });",
									"}",
									"else {",
									"    pm.test(\"The Expected Status code is 404 #(\"+ round + \")\", function () {",
									"        pm.expect(pm.response.code).to.be.eq(404);",
									"    });",
									"}",
									"",
									"pm.test(\"Test with case of <<- \"+ copyBrand.message + \" ->>\", function () {",
									"    pm.expect(item).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Request: \"+ pm.request.body.raw.toString());",
									"pm.test(\"Response: \"+ JSON.stringify(item));",
									"",
									"",
									"if(round >= BASE_BRAND_FAIL.length-1) {",
									"    pm.collectionVariables.set(\"rounds\", null);",
									"    pm.execution.setNextRequest();",
									"} else {",
									"    pm.execution.setNextRequest(\"EDIT-BRAND-FAIL-RANDOM-CASE\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.has(\"rounds\")) {",
									"    pm.collectionVariables.set(\"rounds\", 999);",
									"}",
									"round = parseInt(pm.collectionVariables.get(\"rounds\"));",
									"round = (isNaN(round) || round >= BASE_BRAND_FAIL.length-1) ? 0 : round + 1;",
									"",
									"pm.collectionVariables.set(\"rounds\", round);",
									"",
									"copyBrand = BASE_BRAND_FAIL[round];",
									"console.log(\"request body: #\"+ round, copyBrand);",
									"",
									"targetBrandId = copyBrand.target;",
									"",
									"pm.collectionVariables.set(\"target_id\", targetBrandId);",
									"ORIGINAL_DATA = {};",
									"pm.sendRequest(pm.collectionVariables.get(\"base_url\")+'/v1/brands/'+targetBrandId, (error, response) => {",
									"  if (error) {",
									"    console.log(error);",
									"  } else {",
									"    tmp = response.json();",
									"    ORIGINAL_DATA = tmp;",
									"  }",
									"});",
									"",
									"pm.request.body.raw = JSON.stringify(copyBrand);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v1/brands/{{target_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"brands",
								"{{target_id}}"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			],
			"description": "**EDIT-BRAND-NORMAL-RANDOM-CASE**  \n**TEST ROUNDS:** 3  \n**SCENARIO:**\n\n1) Send GET request to get current brand (random id), store it in memory.  \n2) Send PUT request with SELECT TEST DATA  \n3) Send GET request to get latest data then check them as the spec.  \n4) Send PUT request to restore data back to previous state using data in 1).  \n5) Send GET request to get latest data then check them with data in 1).  \n6) Iterate 1) to 5), 3 Rounds.\n\n| TEST DATA : |\n| --- |\n| **\\# Will send request to /v1/brands/1 (update, another field for Samsung)**  <br>{  <br>**\"name\" : \"Samsung\"**,  <br>\"websiteUrl\" : \"[https://www.brand.com\"](https://www.brand.com),  <br>\"countryOfOrigin\" : \"United State of America\",  <br>\"isActive\" : false  <br>} |\n| **\\# Default value of isActive is TRUE**  <br>{  <br>\"id\": null,  <br>\"name\" : \" New Brand\" + generateString(3)+ \" \",  <br>\"websiteUrl\" : null,  <br>\"countryOfOrigin\" : \"United State of America\",  <br>**\"isActive\" : null**  <br>} |\n\n**\\# Max length data for name, websiteUrl and countryOfOrigin**\n\n{  \n\"id\": 1,  \n\"name\" : \" \"+ generateString(30)+ \" \",  \n\"websiteUrl\" : generateString(40),  \n\"countryOfOrigin\" : generateString(80),  \n\"isActive\" : false  \n}\n\n**EDIT-BRAND-FAIL-RANDOM-CASE**  \n**TEST ROUNDS:** 4  \n**SCENARIO:**\n\n1) Send POST request with TEST DATA, Expected status 400,500 **(404 for Test Data #2)**  \n2) Iterate 1) , 4 Rounds.\n\n| **TEST DATA:** |\n| --- |\n| **\\# isActive is not Boolean  <br>**{  <br>\"name\" : \"Samsung\"+ generateString(Math.round(Math.random()\\*3)+2),  <br>\"websiteUrl\" : \"[https://www.brand.com\"](https://www.brand.com),  <br>\"countryOfOrigin\" : \"United State of America\",  <br>\"isActive\" : \"true/false\",  <br>} |\n| **\\# Brand does not exist !!! (send request to /v1/brands/999)**  <br>{  <br>\"id\": null,  <br>\"name\" : generateString(41) ,  <br>\"websiteUrl\" : \"[https://www.brand.com\"](https://www.brand.com),  <br>\"countryOfOrigin\" : \"United State of America\",  <br>\"isActive\" : null,  <br>} |\n| **\\# Duplicated brand name (unmatched case)**  <br>{  <br>\"id\": null,  <br>\"name\" : \" saMsUng \" ,  <br>\"websiteUrl\" : \"[https://www.brand.com\"](https://www.brand.com),  <br>\"countryOfOrigin\" : null,  <br>\"isActive\" : null,  <br>} |\n| **\\# Empty brand name, field length is exceed limit**  <br>{  <br>\"id\": 1,  <br>**\"name\" : \" \",**  <br>\"websiteUrl\" : generateString(**41)**,  <br>\"countryOfOrigin\" : generateString(**81**),  <br>\"isActive\" : false,  <br>} |",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "PBI-8 DELETE-BRAND",
			"item": [
				{
					"name": "DELETE-BRAND-NORMAL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var body_str = JSON.stringify(BRAND_ADD_FOR_DELETE); ",
									"",
									"",
									"the_url = pm.collectionVariables.get(\"base_url\")+ \"/v1/brands\";",
									"const updateRequest = {",
									"    url: the_url,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: body_str",
									"    }",
									"};",
									"",
									"pm.sendRequest(updateRequest, function (err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        let newAddedBrand = res.json();",
									"        pm.test(\"Add new brand, Expected Status code is 201\", () => {",
									"            pm.expect(res).to.have.status(201);",
									"        });",
									"        pm.collectionVariables.set(\"delete_id\", newAddedBrand.id);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The successful DELETE request should be 204\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(204);",
									"});",
									"",
									"the_url = pm.request.url.toString();",
									"const deleteRequest = {",
									"    url: the_url,",
									"    method: 'DELETE',",
									"    header: {",
									"        'Content-Type': 'application/json'",
									"    }",
									"};",
									"",
									"pm.sendRequest(deleteRequest, function (err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        pm.test(\"Delete NOT FOUND Brand, Expected Status code is 404\", () => {",
									"            let resJson = res.json();",
									"            pm.expect(res).to.have.status(404);",
									"        });",
									"    }",
									"});",
									"",
									"// pm.sendRequest(pm.collectionVariables.get(\"base_url\")+'/v1/brands/'",
									"//     + pm.collectionVariables.get(\"delete_id\"), (error, response) => {",
									"//   if (error) {",
									"//     console.log(error);",
									"//   }",
									"",
									"//   pm.test('The expected status code must be 404 , when get deleted brand', () => {",
									"//     pm.expect(response.code).to.be.eq(404);",
									"//   });",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/brands/{{delete_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"brands",
								"{{delete_id}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "DELETE-BRAND-FAIL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"delete_items = [1,2,3,4,10,12];",
									"if (!pm.collectionVariables.has(\"rounds\")) {",
									"    pm.collectionVariables.set(\"rounds\", 999);",
									"}",
									"round = parseInt(pm.collectionVariables.get(\"rounds\"));",
									"round = (isNaN(round) || round >= 1) ? 0 : round + 1;",
									"",
									"pm.collectionVariables.set(\"rounds\", round);",
									"",
									"DELETE_ID = Math.round(Math.random()*100) % delete_items.length;",
									"pm.collectionVariables.set(\"delete_id\", delete_items[DELETE_ID]);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Brand has Sale Item, expected 400\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(400);",
									"});",
									"",
									"if(round >= 1) {",
									"    pm.collectionVariables.set(\"rounds\", null);",
									"    pm.execution.setNextRequest(null);",
									"} else {",
									"    pm.execution.setNextRequest(\"DELETE-BRAND-FAIL\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/brands/{{delete_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"brands",
								"{{delete_id}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			],
			"description": "**DELETE-BRAND-NORMAL**  \n**TEST ROUNDS:** 1  \n**SCENARIO:**\n\n1) Send **POST** request to **ADD new brand.**  \n2) **Expected status 201**, Store new brand ID from Response to variable.  \n3) Send **DELETE** request to remove brand with ID in 2), **Expected status 204**.  \n4) Send **DELETE** request to remove brand with ID **in 2) AGAIN**, **Expected status 404**.\n\n| TEST DATA : |\n| --- |\n| {  <br>\"name\" : generateString(10),  <br>\"websiteUrl\" : generateString(20),  <br>\"countryOfOrigin\" : generateString(20),  <br>\"isActive\" : false  <br>} |\n\n**DELETE-BRAND-FAIL**  \n**TEST ROUNDS:** 2  \n**SCENARIO:  \nTEST DATA: {id} -> 1, 2, 3, 4, 10, 12**\n\n1) Send **DELETE** request to /v1/brand/{id}, **Expected status 400**."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const characters ='.-ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"",
					"generateString = function (length) {",
					"    let result = '';",
					"    const charactersLength = characters.length;",
					"    for ( let i = 0; i < length; i++ ) {",
					"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"    }",
					"    return result;",
					"}",
					"if (!pm.globals.has(\"moment_js\") || !pm.globals.has(\"moment_tz\")) {",
					"    pm.sendRequest(\"https://momentjs.com/downloads/moment-timezone-with-data-10-year-range.js\", (mtzErr, mtzRes) => {",
					"        pm.sendRequest(\"https://momentjs.com/downloads/moment.js\", (mjsErr, mjsRes) => {",
					"            pm.globals.set(\"moment_js\", mjsRes.text());",
					"            pm.globals.set(\"moment_tz\", mtzRes.text());",
					"        })",
					"    })",
					"}",
					"(new Function(pm.globals.get(\"moment_js\")))();",
					"(new Function(pm.globals.get(\"moment_tz\")))();",
					"",
					"BASE_BRANDS = [",
					"  {",
					"    \"name\" : \"Samsung\"+ generateString(Math.round(Math.random()*3)+2),",
					"    \"websiteUrl\" : \"https://www.brand.com\",",
					"    \"countryOfOrigin\" : \"United State of America\",",
					"    \"isActive\" : true",
					"  },",
					"  {",
					"    \"id\": null,",
					"    \"name\" : \"  New Brand\" + generateString(Math.round(Math.random()*3)+2)+ \"    \",",
					"    \"websiteUrl\" : null,",
					"    \"countryOfOrigin\" : \"United State of America\",",
					"    \"isActive\" : null",
					"  },",
					"  {",
					"    \"id\": 1,",
					"    \"name\" : \"   \"+ generateString(30)+ \"   \",",
					"    \"websiteUrl\" : generateString(40),",
					"    \"countryOfOrigin\" : generateString(80),",
					"    \"isActive\" : false",
					"  }",
					"];",
					"",
					"EDIT_BASE_BRANDS = [",
					"  {",
					"    \"name\" : \"Samsung\",",
					"    \"websiteUrl\" : \"https://www.brand.com\",",
					"    \"countryOfOrigin\" : \"United State of America\",",
					"    \"isActive\" : false,",
					"    \"target\" : 1",
					"  },",
					"  {",
					"    \"id\": null,",
					"    \"name\" : \"  New Brand\" + generateString(Math.round(Math.random()*3)+2)+ \"    \",",
					"    \"websiteUrl\" : null,",
					"    \"countryOfOrigin\" : \"United State of America\",",
					"    \"isActive\" : null,",
					"    \"target\" : Math.round(Math.random() * 100) % 20 + 1",
					"  },",
					"  {",
					"    \"id\": 1,",
					"    \"name\" : \"   \"+ generateString(30)+ \"   \",",
					"    \"websiteUrl\" : generateString(40),",
					"    \"countryOfOrigin\" : generateString(80),",
					"    \"isActive\" : false,",
					"    \"target\" : Math.round(Math.random() * 100) % 20 + 1",
					"  }",
					"];",
					"",
					"BASE_BRAND_FAIL = [",
					"  {",
					"    \"name\" : \"Samsung\"+ generateString(Math.round(Math.random()*3)+2),",
					"    \"websiteUrl\" : \"https://www.brand.com\",",
					"    \"countryOfOrigin\" : \"United State of America\",",
					"    \"isActive\" : \"true/false\",",
					"    \"message\" : \"isActive is not Boolean\",",
					"    \"target\" : Math.round(Math.random() * 100) % 20 + 1",
					"  },",
					"  {",
					"    \"id\": null,",
					"    \"name\" : generateString(31),",
					"    \"websiteUrl\" : \"https://www.brand.com\",",
					"    \"countryOfOrigin\" : \"United State of America\",",
					"    \"isActive\" : null,",
					"    \"message\" : \"For ADD: Field exceed, For EDIT: Brand does not exist\",",
					"    \"target\" : 999",
					"  },",
					"  {",
					"    \"id\": null,",
					"    \"name\" : \"  saMsUng  \" ,",
					"    \"websiteUrl\" : \"https://www.brand.com\",",
					"    \"countryOfOrigin\" : null,",
					"    \"isActive\" : null,",
					"    \"message\" : \"Duplicated brand name (Ignore case)\",",
					"    \"target\" : 20",
					"  },",
					"  {",
					"    \"id\": 1,",
					"    \"name\" : \"    \",",
					"    \"websiteUrl\" : generateString(41),",
					"    \"countryOfOrigin\" : generateString(81),",
					"    \"isActive\" : false,",
					"    \"message\" : \"Empty name, field length is exceed limit\",",
					"    \"target\" : Math.round(Math.random() * 100) % 20 + 1",
					"  }",
					"];",
					"",
					"BRAND_ADD_FOR_DELETE = ",
					"{",
					"    \"name\" : generateString(10),",
					"    \"websiteUrl\" : generateString(20),",
					"    \"countryOfOrigin\" : generateString(20),",
					"    \"isActive\" : false",
					"};",
					"",
					"INIT_BRANDS = ",
					"[",
					"  {",
					"    \"id\": 1,",
					"    \"name\": \"Samsung\",",
					"    \"noOfSaleItems\" : 10",
					"  },",
					"  {",
					"    \"id\": 2,",
					"    \"name\": \"Apple\",",
					"    \"noOfSaleItems\" : 10",
					"  },",
					"  {",
					"    \"id\": 3,",
					"    \"name\": \"Xiaomi\",",
					"    \"noOfSaleItems\" : 10",
					"  },",
					"  {",
					"    \"id\": 4,",
					"    \"name\": \"Huawei\",",
					"    \"noOfSaleItems\" : 10",
					"  },",
					"  {",
					"    \"id\": 5,",
					"    \"name\": \"OnePlus\"",
					"  },",
					"  {",
					"    \"id\": 6,",
					"    \"name\": \"Sony\"",
					"  },",
					"  {",
					"    \"id\": 7,",
					"    \"name\": \"LG\"",
					"  },",
					"  {",
					"    \"id\": 8,",
					"    \"name\": \"Nokia\"",
					"  },",
					"  {",
					"    \"id\": 9,",
					"    \"name\": \"Motorola\"",
					"  },",
					"  {",
					"    \"id\": 10,",
					"    \"name\": \"OPPO\",",
					"    \"noOfSaleItems\" : 10",
					"  },",
					"  {",
					"    \"id\": 11,",
					"    \"name\": \"Vivo\"",
					"  },",
					"  {",
					"    \"id\": 12,",
					"    \"name\": \"ASUS\",",
					"    \"noOfSaleItems\" : 10",
					"  },",
					"  {",
					"    \"id\": 13,",
					"    \"name\": \"Google\"",
					"  },",
					"  {",
					"    \"id\": 14,",
					"    \"name\": \"Realme\"",
					"  },",
					"  {",
					"    \"id\": 15,",
					"    \"name\": \"BlackBerry\"",
					"  },",
					"  {",
					"    \"id\": 16,",
					"    \"name\": \"HTC\"",
					"  },",
					"  {",
					"    \"id\": 17,",
					"    \"name\": \"ZTE\"",
					"  },",
					"  {",
					"    \"id\": 18,",
					"    \"name\": \"Lenovo\"",
					"  },",
					"  {",
					"    \"id\": 19,",
					"    \"name\": \"Honor\"",
					"  },",
					"  {",
					"    \"id\": 20,",
					"    \"name\": \"Nothing\"",
					"  }",
					"];"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"The response Content-type: \"+pm.response.headers.get('Content-type'), function() {",
					"    if(pm.response.code != 204) {",
					"    pm.expect(pm.response.headers.get('Content-type')).to.eql('application/json');",
					"    }",
					"});",
					"",
					"var request_url = pm.request.url.toString();",
					"// console.log(request_url);",
					"// console.log(\"sit.kmutt.ac.th -> \"+ request_url.includes(\"sit.kmutt.ac.th\"));",
					"var expected_url = request_url.includes(\"ip24\") || request_url.includes(\"intproject24\");",
					"pm.test(\"Expected test server is host.sit\",function() {    ",
					"    pm.expect(expected_url).to.be.eq(true);",
					"    pm.expect(pm.request.url.toString()).to.be.contains(\"sit.kmutt.ac.th\");",
					"});",
					"",
					"pm.test(\"Test Date : \"+ Date(),function() {    ",
					"    // do nothing",
					"});",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://ip24ft.sit.kmutt.ac.th:8080/itb-mshop",
			"type": "string"
		},
		{
			"key": "target_id",
			"value": ""
		},
		{
			"key": "original_data",
			"value": ""
		},
		{
			"key": "delete_id",
			"value": ""
		},
		{
			"key": "rounds",
			"value": ""
		}
	]
}